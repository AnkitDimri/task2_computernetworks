**************************** TASK 2 ASSIGNMENT ********************************
Socket Programming: It helps us to connect a client to a server. Client is
                    message sender and receiver and server is just a listener
                    that works on data sent by client.

Thread: A thread is a light-weight process that does not require much memory
        overhead, they are cheaper than processes.

Multi-threading Socket Programming: Multithreading is a process of executing
                                    multiple threads simultaneously in a single
                                    process.

                        MULTI-THREADING MODULES
A _thread module & threading module is used for multi-threading in python,
these modules help in synchronization and provide a lock to a thread in use.

=>    from _thread import *
=>    import threading

A lock object is created by->

=>    print_lock = threading.Lock()

A lock has two states, “locked” or “unlocked”. It has two basic methods
acquire() and release(). When the state is unlocked print_lock.acquire()
is used to change state to locked and print_lock.release() is used to change
state to unlock.

The function thread.start_new_thread() is used to start a new thread and
return its identifier. The first argument is the function to call and its
second argument is a tuple containing the positional list of arguments.

Details about TCP:
1. TCP is a connection-oriented protocol. Connection-orientation means that
   the communicating devices should establish a connection before transmitting
   data and should close the connection after transmitting the data.

2. TCP is reliable as it guarantees delivery of data to the destination router.

3. TCP provides extensive error checking mechanisms. It is because it provides
   flow control and acknowledgment of data.

4. Sequencing of data is a feature of Transmission Control Protocol (TCP).
   this means that packets arrive in-order at the receiver.

5. TCP is comparatively slower than UDP.

6. Retransmission of lost packets is possible in TCP, but not in UDP.

7. TCP has a (20-80) bytes variable length header.

8. TCP is heavy-weight.

9. TCP doesn’t supports Broadcasting.

10. TCP is used by HTTP, HTTPs, FTP, SMTP and Telnet

Details about UDP:
1. UDP is the Datagram oriented protocol. This is because there is no overhead
   for opening a connection, maintaining a connection, and terminating a
   connection. UDP is efficient for broadcast and multicast type of network
   transmission.

2. The delivery of data to the destination cannot be guaranteed in UDP.

3. UDP has only the basic error checking mechanism using checksums.

4. There is no sequencing of data in UDP. If ordering is required, it has to be
   managed by the application layer.

5. UDP is faster, simpler and more efficient than TCP.

6. There is no retransmission of lost packets in User Datagram Protocol (UDP).

7. UDP has a 8 bytes fixed length header.

8. UDP is lightweight.

9. UDP supports Broadcasting.

10. UDP is used by DNS, DHCP, TFTP, SNMP, RIP, and VoIP.
